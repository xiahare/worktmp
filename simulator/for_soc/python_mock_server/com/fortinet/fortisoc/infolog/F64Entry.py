# automatically generated by the FlatBuffers compiler, do not modify

# namespace: infolog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class F64Entry(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # F64Entry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # F64Entry
    def Idx(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # F64Entry
    def Val(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateF64Entry(builder, idx, val):
    builder.Prep(8, 16)
    builder.PrependFloat64(val)
    builder.Pad(6)
    builder.PrependUint16(idx)
    return builder.Offset()


class F64EntryT(object):

    # F64EntryT
    def __init__(
        self,
        idx = 0,
        val = 0.0,
    ):
        self.idx = idx  # type: int
        self.val = val  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        f64Entry = F64Entry()
        f64Entry.Init(buf, pos)
        return cls.InitFromObj(f64Entry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, f64Entry):
        x = F64EntryT()
        x._UnPack(f64Entry)
        return x

    # F64EntryT
    def _UnPack(self, f64Entry):
        if f64Entry is None:
            return
        self.idx = f64Entry.Idx()
        self.val = f64Entry.Val()

    # F64EntryT
    def Pack(self, builder):
        return CreateF64Entry(builder, self.idx, self.val)
