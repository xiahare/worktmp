# automatically generated by the FlatBuffers compiler, do not modify

# namespace: infolog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InfoLogSparseRecord(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InfoLogSparseRecord()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInfoLogSparseRecord(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InfoLogSparseRecord
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InfoLogSparseRecord
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InfoLogSparseRecord
    def Itime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InfoLogSparseRecord
    def DevId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InfoLogSparseRecord
    def DevModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InfoLogSparseRecord
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InfoLogSparseRecord
    def U8(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from com.fortinet.fortisoc.infolog.U8Entry import U8Entry
            obj = U8Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def U8Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def U8IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # InfoLogSparseRecord
    def U16(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from com.fortinet.fortisoc.infolog.U16Entry import U16Entry
            obj = U16Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def U16Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def U16IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # InfoLogSparseRecord
    def U32(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from com.fortinet.fortisoc.infolog.U32Entry import U32Entry
            obj = U32Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def U32Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def U32IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # InfoLogSparseRecord
    def U64(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from com.fortinet.fortisoc.infolog.U64Entry import U64Entry
            obj = U64Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def U64Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def U64IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # InfoLogSparseRecord
    def I8(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from com.fortinet.fortisoc.infolog.I8Entry import I8Entry
            obj = I8Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def I8Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def I8IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # InfoLogSparseRecord
    def I16(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from com.fortinet.fortisoc.infolog.I16Entry import I16Entry
            obj = I16Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def I16Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def I16IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # InfoLogSparseRecord
    def I32(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from com.fortinet.fortisoc.infolog.I32Entry import I32Entry
            obj = I32Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def I32Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def I32IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # InfoLogSparseRecord
    def I64(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from com.fortinet.fortisoc.infolog.I64Entry import I64Entry
            obj = I64Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def I64Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def I64IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # InfoLogSparseRecord
    def F64(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from com.fortinet.fortisoc.infolog.F64Entry import F64Entry
            obj = F64Entry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def F64Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def F64IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # InfoLogSparseRecord
    def Ip(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from com.fortinet.fortisoc.infolog.IpEntry import IpEntry
            obj = IpEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseRecord
    def IpLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def IpIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # InfoLogSparseRecord
    def Strings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # InfoLogSparseRecord
    def StringsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def StringsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # InfoLogSparseRecord
    def StringIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # InfoLogSparseRecord
    def StringIndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # InfoLogSparseRecord
    def StringIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseRecord
    def StringIndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def InfoLogSparseRecordStart(builder):
    builder.StartObject(17)

def Start(builder):
    InfoLogSparseRecordStart(builder)

def InfoLogSparseRecordAddId(builder, id):
    builder.PrependUint64Slot(0, id, 0)

def AddId(builder, id):
    InfoLogSparseRecordAddId(builder, id)

def InfoLogSparseRecordAddItime(builder, itime):
    builder.PrependUint64Slot(1, itime, 0)

def AddItime(builder, itime):
    InfoLogSparseRecordAddItime(builder, itime)

def InfoLogSparseRecordAddDevId(builder, devId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(devId), 0)

def AddDevId(builder, devId):
    InfoLogSparseRecordAddDevId(builder, devId)

def InfoLogSparseRecordAddDevModel(builder, devModel):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(devModel), 0)

def AddDevModel(builder, devModel):
    InfoLogSparseRecordAddDevModel(builder, devModel)

def InfoLogSparseRecordAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    InfoLogSparseRecordAddType(builder, type)

def InfoLogSparseRecordAddU8(builder, u8):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(u8), 0)

def AddU8(builder, u8):
    InfoLogSparseRecordAddU8(builder, u8)

def InfoLogSparseRecordStartU8Vector(builder, numElems):
    return builder.StartVector(4, numElems, 2)

def StartU8Vector(builder, numElems):
    return InfoLogSparseRecordStartU8Vector(builder, numElems)

def InfoLogSparseRecordAddU16(builder, u16):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(u16), 0)

def AddU16(builder, u16):
    InfoLogSparseRecordAddU16(builder, u16)

def InfoLogSparseRecordStartU16Vector(builder, numElems):
    return builder.StartVector(4, numElems, 2)

def StartU16Vector(builder, numElems):
    return InfoLogSparseRecordStartU16Vector(builder, numElems)

def InfoLogSparseRecordAddU32(builder, u32):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(u32), 0)

def AddU32(builder, u32):
    InfoLogSparseRecordAddU32(builder, u32)

def InfoLogSparseRecordStartU32Vector(builder, numElems):
    return builder.StartVector(8, numElems, 4)

def StartU32Vector(builder, numElems):
    return InfoLogSparseRecordStartU32Vector(builder, numElems)

def InfoLogSparseRecordAddU64(builder, u64):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(u64), 0)

def AddU64(builder, u64):
    InfoLogSparseRecordAddU64(builder, u64)

def InfoLogSparseRecordStartU64Vector(builder, numElems):
    return builder.StartVector(16, numElems, 8)

def StartU64Vector(builder, numElems):
    return InfoLogSparseRecordStartU64Vector(builder, numElems)

def InfoLogSparseRecordAddI8(builder, i8):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(i8), 0)

def AddI8(builder, i8):
    InfoLogSparseRecordAddI8(builder, i8)

def InfoLogSparseRecordStartI8Vector(builder, numElems):
    return builder.StartVector(4, numElems, 2)

def StartI8Vector(builder, numElems):
    return InfoLogSparseRecordStartI8Vector(builder, numElems)

def InfoLogSparseRecordAddI16(builder, i16):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(i16), 0)

def AddI16(builder, i16):
    InfoLogSparseRecordAddI16(builder, i16)

def InfoLogSparseRecordStartI16Vector(builder, numElems):
    return builder.StartVector(4, numElems, 2)

def StartI16Vector(builder, numElems):
    return InfoLogSparseRecordStartI16Vector(builder, numElems)

def InfoLogSparseRecordAddI32(builder, i32):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(i32), 0)

def AddI32(builder, i32):
    InfoLogSparseRecordAddI32(builder, i32)

def InfoLogSparseRecordStartI32Vector(builder, numElems):
    return builder.StartVector(8, numElems, 4)

def StartI32Vector(builder, numElems):
    return InfoLogSparseRecordStartI32Vector(builder, numElems)

def InfoLogSparseRecordAddI64(builder, i64):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(i64), 0)

def AddI64(builder, i64):
    InfoLogSparseRecordAddI64(builder, i64)

def InfoLogSparseRecordStartI64Vector(builder, numElems):
    return builder.StartVector(16, numElems, 8)

def StartI64Vector(builder, numElems):
    return InfoLogSparseRecordStartI64Vector(builder, numElems)

def InfoLogSparseRecordAddF64(builder, f64):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(f64), 0)

def AddF64(builder, f64):
    InfoLogSparseRecordAddF64(builder, f64)

def InfoLogSparseRecordStartF64Vector(builder, numElems):
    return builder.StartVector(16, numElems, 8)

def StartF64Vector(builder, numElems):
    return InfoLogSparseRecordStartF64Vector(builder, numElems)

def InfoLogSparseRecordAddIp(builder, ip):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(ip), 0)

def AddIp(builder, ip):
    InfoLogSparseRecordAddIp(builder, ip)

def InfoLogSparseRecordStartIpVector(builder, numElems):
    return builder.StartVector(24, numElems, 8)

def StartIpVector(builder, numElems):
    return InfoLogSparseRecordStartIpVector(builder, numElems)

def InfoLogSparseRecordAddStrings(builder, strings):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(strings), 0)

def AddStrings(builder, strings):
    InfoLogSparseRecordAddStrings(builder, strings)

def InfoLogSparseRecordStartStringsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStringsVector(builder, numElems):
    return InfoLogSparseRecordStartStringsVector(builder, numElems)

def InfoLogSparseRecordAddStringIndices(builder, stringIndices):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(stringIndices), 0)

def AddStringIndices(builder, stringIndices):
    InfoLogSparseRecordAddStringIndices(builder, stringIndices)

def InfoLogSparseRecordStartStringIndicesVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartStringIndicesVector(builder, numElems):
    return InfoLogSparseRecordStartStringIndicesVector(builder, numElems)

def InfoLogSparseRecordEnd(builder):
    return builder.EndObject()

def End(builder):
    return InfoLogSparseRecordEnd(builder)

import com.fortinet.fortisoc.infolog.F64Entry
import com.fortinet.fortisoc.infolog.I16Entry
import com.fortinet.fortisoc.infolog.I32Entry
import com.fortinet.fortisoc.infolog.I64Entry
import com.fortinet.fortisoc.infolog.I8Entry
import com.fortinet.fortisoc.infolog.IpEntry
import com.fortinet.fortisoc.infolog.U16Entry
import com.fortinet.fortisoc.infolog.U32Entry
import com.fortinet.fortisoc.infolog.U64Entry
import com.fortinet.fortisoc.infolog.U8Entry
try:
    from typing import List
except:
    pass

class InfoLogSparseRecordT(object):

    # InfoLogSparseRecordT
    def __init__(
        self,
        id = 0,
        itime = 0,
        devId = None,
        devModel = None,
        type = None,
        u8 = None,
        u16 = None,
        u32 = None,
        u64 = None,
        i8 = None,
        i16 = None,
        i32 = None,
        i64 = None,
        f64 = None,
        ip = None,
        strings = None,
        stringIndices = None,
    ):
        self.id = id  # type: int
        self.itime = itime  # type: int
        self.devId = devId  # type: Optional[str]
        self.devModel = devModel  # type: Optional[str]
        self.type = type  # type: Optional[str]
        self.u8 = u8  # type: Optional[List[com.fortinet.fortisoc.infolog.U8Entry.U8EntryT]]
        self.u16 = u16  # type: Optional[List[com.fortinet.fortisoc.infolog.U16Entry.U16EntryT]]
        self.u32 = u32  # type: Optional[List[com.fortinet.fortisoc.infolog.U32Entry.U32EntryT]]
        self.u64 = u64  # type: Optional[List[com.fortinet.fortisoc.infolog.U64Entry.U64EntryT]]
        self.i8 = i8  # type: Optional[List[com.fortinet.fortisoc.infolog.I8Entry.I8EntryT]]
        self.i16 = i16  # type: Optional[List[com.fortinet.fortisoc.infolog.I16Entry.I16EntryT]]
        self.i32 = i32  # type: Optional[List[com.fortinet.fortisoc.infolog.I32Entry.I32EntryT]]
        self.i64 = i64  # type: Optional[List[com.fortinet.fortisoc.infolog.I64Entry.I64EntryT]]
        self.f64 = f64  # type: Optional[List[com.fortinet.fortisoc.infolog.F64Entry.F64EntryT]]
        self.ip = ip  # type: Optional[List[com.fortinet.fortisoc.infolog.IpEntry.IpEntryT]]
        self.strings = strings  # type: Optional[List[Optional[str]]]
        self.stringIndices = stringIndices  # type: Optional[List[int]]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        infoLogSparseRecord = InfoLogSparseRecord()
        infoLogSparseRecord.Init(buf, pos)
        return cls.InitFromObj(infoLogSparseRecord)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, infoLogSparseRecord):
        x = InfoLogSparseRecordT()
        x._UnPack(infoLogSparseRecord)
        return x

    # InfoLogSparseRecordT
    def _UnPack(self, infoLogSparseRecord):
        if infoLogSparseRecord is None:
            return
        self.id = infoLogSparseRecord.Id()
        self.itime = infoLogSparseRecord.Itime()
        self.devId = infoLogSparseRecord.DevId()
        self.devModel = infoLogSparseRecord.DevModel()
        self.type = infoLogSparseRecord.Type()
        if not infoLogSparseRecord.U8IsNone():
            self.u8 = []
            for i in range(infoLogSparseRecord.U8Length()):
                if infoLogSparseRecord.U8(i) is None:
                    self.u8.append(None)
                else:
                    u8Entry_ = com.fortinet.fortisoc.infolog.U8Entry.U8EntryT.InitFromObj(infoLogSparseRecord.U8(i))
                    self.u8.append(u8Entry_)
        if not infoLogSparseRecord.U16IsNone():
            self.u16 = []
            for i in range(infoLogSparseRecord.U16Length()):
                if infoLogSparseRecord.U16(i) is None:
                    self.u16.append(None)
                else:
                    u16Entry_ = com.fortinet.fortisoc.infolog.U16Entry.U16EntryT.InitFromObj(infoLogSparseRecord.U16(i))
                    self.u16.append(u16Entry_)
        if not infoLogSparseRecord.U32IsNone():
            self.u32 = []
            for i in range(infoLogSparseRecord.U32Length()):
                if infoLogSparseRecord.U32(i) is None:
                    self.u32.append(None)
                else:
                    u32Entry_ = com.fortinet.fortisoc.infolog.U32Entry.U32EntryT.InitFromObj(infoLogSparseRecord.U32(i))
                    self.u32.append(u32Entry_)
        if not infoLogSparseRecord.U64IsNone():
            self.u64 = []
            for i in range(infoLogSparseRecord.U64Length()):
                if infoLogSparseRecord.U64(i) is None:
                    self.u64.append(None)
                else:
                    u64Entry_ = com.fortinet.fortisoc.infolog.U64Entry.U64EntryT.InitFromObj(infoLogSparseRecord.U64(i))
                    self.u64.append(u64Entry_)
        if not infoLogSparseRecord.I8IsNone():
            self.i8 = []
            for i in range(infoLogSparseRecord.I8Length()):
                if infoLogSparseRecord.I8(i) is None:
                    self.i8.append(None)
                else:
                    i8Entry_ = com.fortinet.fortisoc.infolog.I8Entry.I8EntryT.InitFromObj(infoLogSparseRecord.I8(i))
                    self.i8.append(i8Entry_)
        if not infoLogSparseRecord.I16IsNone():
            self.i16 = []
            for i in range(infoLogSparseRecord.I16Length()):
                if infoLogSparseRecord.I16(i) is None:
                    self.i16.append(None)
                else:
                    i16Entry_ = com.fortinet.fortisoc.infolog.I16Entry.I16EntryT.InitFromObj(infoLogSparseRecord.I16(i))
                    self.i16.append(i16Entry_)
        if not infoLogSparseRecord.I32IsNone():
            self.i32 = []
            for i in range(infoLogSparseRecord.I32Length()):
                if infoLogSparseRecord.I32(i) is None:
                    self.i32.append(None)
                else:
                    i32Entry_ = com.fortinet.fortisoc.infolog.I32Entry.I32EntryT.InitFromObj(infoLogSparseRecord.I32(i))
                    self.i32.append(i32Entry_)
        if not infoLogSparseRecord.I64IsNone():
            self.i64 = []
            for i in range(infoLogSparseRecord.I64Length()):
                if infoLogSparseRecord.I64(i) is None:
                    self.i64.append(None)
                else:
                    i64Entry_ = com.fortinet.fortisoc.infolog.I64Entry.I64EntryT.InitFromObj(infoLogSparseRecord.I64(i))
                    self.i64.append(i64Entry_)
        if not infoLogSparseRecord.F64IsNone():
            self.f64 = []
            for i in range(infoLogSparseRecord.F64Length()):
                if infoLogSparseRecord.F64(i) is None:
                    self.f64.append(None)
                else:
                    f64Entry_ = com.fortinet.fortisoc.infolog.F64Entry.F64EntryT.InitFromObj(infoLogSparseRecord.F64(i))
                    self.f64.append(f64Entry_)
        if not infoLogSparseRecord.IpIsNone():
            self.ip = []
            for i in range(infoLogSparseRecord.IpLength()):
                if infoLogSparseRecord.Ip(i) is None:
                    self.ip.append(None)
                else:
                    ipEntry_ = com.fortinet.fortisoc.infolog.IpEntry.IpEntryT.InitFromObj(infoLogSparseRecord.Ip(i))
                    self.ip.append(ipEntry_)
        if not infoLogSparseRecord.StringsIsNone():
            self.strings = []
            for i in range(infoLogSparseRecord.StringsLength()):
                self.strings.append(infoLogSparseRecord.Strings(i))
        if not infoLogSparseRecord.StringIndicesIsNone():
            if np is None:
                self.stringIndices = []
                for i in range(infoLogSparseRecord.StringIndicesLength()):
                    self.stringIndices.append(infoLogSparseRecord.StringIndices(i))
            else:
                self.stringIndices = infoLogSparseRecord.StringIndicesAsNumpy()

    # InfoLogSparseRecordT
    def Pack(self, builder):
        if self.devId is not None:
            devId = builder.CreateString(self.devId)
        if self.devModel is not None:
            devModel = builder.CreateString(self.devModel)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.u8 is not None:
            InfoLogSparseRecordStartU8Vector(builder, len(self.u8))
            for i in reversed(range(len(self.u8))):
                self.u8[i].Pack(builder)
            u8 = builder.EndVector()
        if self.u16 is not None:
            InfoLogSparseRecordStartU16Vector(builder, len(self.u16))
            for i in reversed(range(len(self.u16))):
                self.u16[i].Pack(builder)
            u16 = builder.EndVector()
        if self.u32 is not None:
            InfoLogSparseRecordStartU32Vector(builder, len(self.u32))
            for i in reversed(range(len(self.u32))):
                self.u32[i].Pack(builder)
            u32 = builder.EndVector()
        if self.u64 is not None:
            InfoLogSparseRecordStartU64Vector(builder, len(self.u64))
            for i in reversed(range(len(self.u64))):
                self.u64[i].Pack(builder)
            u64 = builder.EndVector()
        if self.i8 is not None:
            InfoLogSparseRecordStartI8Vector(builder, len(self.i8))
            for i in reversed(range(len(self.i8))):
                self.i8[i].Pack(builder)
            i8 = builder.EndVector()
        if self.i16 is not None:
            InfoLogSparseRecordStartI16Vector(builder, len(self.i16))
            for i in reversed(range(len(self.i16))):
                self.i16[i].Pack(builder)
            i16 = builder.EndVector()
        if self.i32 is not None:
            InfoLogSparseRecordStartI32Vector(builder, len(self.i32))
            for i in reversed(range(len(self.i32))):
                self.i32[i].Pack(builder)
            i32 = builder.EndVector()
        if self.i64 is not None:
            InfoLogSparseRecordStartI64Vector(builder, len(self.i64))
            for i in reversed(range(len(self.i64))):
                self.i64[i].Pack(builder)
            i64 = builder.EndVector()
        if self.f64 is not None:
            InfoLogSparseRecordStartF64Vector(builder, len(self.f64))
            for i in reversed(range(len(self.f64))):
                self.f64[i].Pack(builder)
            f64 = builder.EndVector()
        if self.ip is not None:
            InfoLogSparseRecordStartIpVector(builder, len(self.ip))
            for i in reversed(range(len(self.ip))):
                self.ip[i].Pack(builder)
            ip = builder.EndVector()
        if self.strings is not None:
            stringslist = []
            for i in range(len(self.strings)):
                stringslist.append(builder.CreateString(self.strings[i]))
            InfoLogSparseRecordStartStringsVector(builder, len(self.strings))
            for i in reversed(range(len(self.strings))):
                builder.PrependUOffsetTRelative(stringslist[i])
            strings = builder.EndVector()
        if self.stringIndices is not None:
            if np is not None and type(self.stringIndices) is np.ndarray:
                stringIndices = builder.CreateNumpyVector(self.stringIndices)
            else:
                InfoLogSparseRecordStartStringIndicesVector(builder, len(self.stringIndices))
                for i in reversed(range(len(self.stringIndices))):
                    builder.PrependUint16(self.stringIndices[i])
                stringIndices = builder.EndVector()
        InfoLogSparseRecordStart(builder)
        InfoLogSparseRecordAddId(builder, self.id)
        InfoLogSparseRecordAddItime(builder, self.itime)
        if self.devId is not None:
            InfoLogSparseRecordAddDevId(builder, devId)
        if self.devModel is not None:
            InfoLogSparseRecordAddDevModel(builder, devModel)
        if self.type is not None:
            InfoLogSparseRecordAddType(builder, type)
        if self.u8 is not None:
            InfoLogSparseRecordAddU8(builder, u8)
        if self.u16 is not None:
            InfoLogSparseRecordAddU16(builder, u16)
        if self.u32 is not None:
            InfoLogSparseRecordAddU32(builder, u32)
        if self.u64 is not None:
            InfoLogSparseRecordAddU64(builder, u64)
        if self.i8 is not None:
            InfoLogSparseRecordAddI8(builder, i8)
        if self.i16 is not None:
            InfoLogSparseRecordAddI16(builder, i16)
        if self.i32 is not None:
            InfoLogSparseRecordAddI32(builder, i32)
        if self.i64 is not None:
            InfoLogSparseRecordAddI64(builder, i64)
        if self.f64 is not None:
            InfoLogSparseRecordAddF64(builder, f64)
        if self.ip is not None:
            InfoLogSparseRecordAddIp(builder, ip)
        if self.strings is not None:
            InfoLogSparseRecordAddStrings(builder, strings)
        if self.stringIndices is not None:
            InfoLogSparseRecordAddStringIndices(builder, stringIndices)
        infoLogSparseRecord = InfoLogSparseRecordEnd(builder)
        return infoLogSparseRecord
