# Generated by the gRPC FlatBuffers compiler. DO NOT EDIT!

import flatbuffers
import grpc

from com.fortinet.fortisoc.infolog.InfoLogSparseBatch import InfoLogSparseBatch
from com.fortinet.fortisoc.infolog.RpcResponse import RpcResponse


class InfoLogTransportServiceStub(object):
  '''Interface exported by the server.'''

  def __init__(self, channel):
    '''Constructor.

    Args:
      channel: A grpc.Channel.
    '''

    self.sendLogBatch = channel.unary_unary(
      method='/com.fortinet.fortisoc.infolog.InfoLogTransportService/sendLogBatch')

    self.streamLogBatches = channel.stream_stream(
      method='/com.fortinet.fortisoc.infolog.InfoLogTransportService/streamLogBatches')


class InfoLogTransportServiceServicer(object):
  '''Interface exported by the server.'''

  def sendLogBatch(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def streamLogBatches(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InfoLogTransportServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
    'sendLogBatch': grpc.unary_unary_rpc_method_handler(
      servicer.sendLogBatch),
    'streamLogBatches': grpc.stream_stream_rpc_method_handler(
      servicer.streamLogBatches),
  }

  generic_handler = grpc.method_handlers_generic_handler(
    'com.fortinet.fortisoc.infolog.InfoLogTransportService', rpc_method_handlers)

  server.add_generic_rpc_handlers((generic_handler,))


