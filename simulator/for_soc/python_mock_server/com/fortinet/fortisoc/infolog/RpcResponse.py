# automatically generated by the FlatBuffers compiler, do not modify

# namespace: infolog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RpcResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RpcResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRpcResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RpcResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RpcResponse
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RpcResponse
    def Body(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RpcResponseStart(builder):
    builder.StartObject(2)

def Start(builder):
    RpcResponseStart(builder)

def RpcResponseAddStatus(builder, status):
    builder.PrependUint8Slot(0, status, 0)

def AddStatus(builder, status):
    RpcResponseAddStatus(builder, status)

def RpcResponseAddBody(builder, body):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(body), 0)

def AddBody(builder, body):
    RpcResponseAddBody(builder, body)

def RpcResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return RpcResponseEnd(builder)


class RpcResponseT(object):

    # RpcResponseT
    def __init__(
        self,
        status = 0,
        body = None,
    ):
        self.status = status  # type: int
        self.body = body  # type: Optional[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rpcResponse = RpcResponse()
        rpcResponse.Init(buf, pos)
        return cls.InitFromObj(rpcResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rpcResponse):
        x = RpcResponseT()
        x._UnPack(rpcResponse)
        return x

    # RpcResponseT
    def _UnPack(self, rpcResponse):
        if rpcResponse is None:
            return
        self.status = rpcResponse.Status()
        self.body = rpcResponse.Body()

    # RpcResponseT
    def Pack(self, builder):
        if self.body is not None:
            body = builder.CreateString(self.body)
        RpcResponseStart(builder)
        RpcResponseAddStatus(builder, self.status)
        if self.body is not None:
            RpcResponseAddBody(builder, body)
        rpcResponse = RpcResponseEnd(builder)
        return rpcResponse
