# automatically generated by the FlatBuffers compiler, do not modify

# namespace: infolog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IpEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 24

    # IpEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IpEntry
    def Idx(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # IpEntry
    def Hi(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # IpEntry
    def Lo(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateIpEntry(builder, idx, hi, lo):
    builder.Prep(8, 24)
    builder.PrependUint64(lo)
    builder.PrependUint64(hi)
    builder.Pad(6)
    builder.PrependUint16(idx)
    return builder.Offset()


class IpEntryT(object):

    # IpEntryT
    def __init__(
        self,
        idx = 0,
        hi = 0,
        lo = 0,
    ):
        self.idx = idx  # type: int
        self.hi = hi  # type: int
        self.lo = lo  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ipEntry = IpEntry()
        ipEntry.Init(buf, pos)
        return cls.InitFromObj(ipEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ipEntry):
        x = IpEntryT()
        x._UnPack(ipEntry)
        return x

    # IpEntryT
    def _UnPack(self, ipEntry):
        if ipEntry is None:
            return
        self.idx = ipEntry.Idx()
        self.hi = ipEntry.Hi()
        self.lo = ipEntry.Lo()

    # IpEntryT
    def Pack(self, builder):
        return CreateIpEntry(builder, self.idx, self.hi, self.lo)
