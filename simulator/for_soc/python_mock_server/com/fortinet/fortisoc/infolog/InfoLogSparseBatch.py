# automatically generated by the FlatBuffers compiler, do not modify

# namespace: infolog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InfoLogSparseBatch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InfoLogSparseBatch()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInfoLogSparseBatch(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InfoLogSparseBatch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InfoLogSparseBatch
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # InfoLogSparseBatch
    def Records(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from com.fortinet.fortisoc.infolog.InfoLogSparseRecord import InfoLogSparseRecord
            obj = InfoLogSparseRecord()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InfoLogSparseBatch
    def RecordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InfoLogSparseBatch
    def RecordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def InfoLogSparseBatchStart(builder):
    builder.StartObject(2)

def Start(builder):
    InfoLogSparseBatchStart(builder)

def InfoLogSparseBatchAddVersion(builder, version):
    builder.PrependUint16Slot(0, version, 0)

def AddVersion(builder, version):
    InfoLogSparseBatchAddVersion(builder, version)

def InfoLogSparseBatchAddRecords(builder, records):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(records), 0)

def AddRecords(builder, records):
    InfoLogSparseBatchAddRecords(builder, records)

def InfoLogSparseBatchStartRecordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRecordsVector(builder, numElems):
    return InfoLogSparseBatchStartRecordsVector(builder, numElems)

def InfoLogSparseBatchEnd(builder):
    return builder.EndObject()

def End(builder):
    return InfoLogSparseBatchEnd(builder)

import com.fortinet.fortisoc.infolog.InfoLogSparseRecord
try:
    from typing import List
except:
    pass

class InfoLogSparseBatchT(object):

    # InfoLogSparseBatchT
    def __init__(
        self,
        version = 0,
        records = None,
    ):
        self.version = version  # type: int
        self.records = records  # type: Optional[List[com.fortinet.fortisoc.infolog.InfoLogSparseRecord.InfoLogSparseRecordT]]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        infoLogSparseBatch = InfoLogSparseBatch()
        infoLogSparseBatch.Init(buf, pos)
        return cls.InitFromObj(infoLogSparseBatch)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, infoLogSparseBatch):
        x = InfoLogSparseBatchT()
        x._UnPack(infoLogSparseBatch)
        return x

    # InfoLogSparseBatchT
    def _UnPack(self, infoLogSparseBatch):
        if infoLogSparseBatch is None:
            return
        self.version = infoLogSparseBatch.Version()
        if not infoLogSparseBatch.RecordsIsNone():
            self.records = []
            for i in range(infoLogSparseBatch.RecordsLength()):
                if infoLogSparseBatch.Records(i) is None:
                    self.records.append(None)
                else:
                    infoLogSparseRecord_ = com.fortinet.fortisoc.infolog.InfoLogSparseRecord.InfoLogSparseRecordT.InitFromObj(infoLogSparseBatch.Records(i))
                    self.records.append(infoLogSparseRecord_)

    # InfoLogSparseBatchT
    def Pack(self, builder):
        if self.records is not None:
            recordslist = []
            for i in range(len(self.records)):
                recordslist.append(self.records[i].Pack(builder))
            InfoLogSparseBatchStartRecordsVector(builder, len(self.records))
            for i in reversed(range(len(self.records))):
                builder.PrependUOffsetTRelative(recordslist[i])
            records = builder.EndVector()
        InfoLogSparseBatchStart(builder)
        InfoLogSparseBatchAddVersion(builder, self.version)
        if self.records is not None:
            InfoLogSparseBatchAddRecords(builder, records)
        infoLogSparseBatch = InfoLogSparseBatchEnd(builder)
        return infoLogSparseBatch
